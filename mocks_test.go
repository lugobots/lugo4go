// Code generated by MockGen. DO NOT EDIT.
// Source: ./contracts.go

// Package lugo4go is a generated GoMock package.
package lugo4go

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	mapper "github.com/lugobots/lugo4go/v3/field"
	proto "github.com/lugobots/lugo4go/v3/proto"
)

// MockRawBot is a mock of RawBot interface.
type MockRawBot struct {
	ctrl     *gomock.Controller
	recorder *MockRawBotMockRecorder
}

// MockRawBotMockRecorder is the mock recorder for MockRawBot.
type MockRawBotMockRecorder struct {
	mock *MockRawBot
}

// NewMockRawBot creates a new mock instance.
func NewMockRawBot(ctrl *gomock.Controller) *MockRawBot {
	mock := &MockRawBot{ctrl: ctrl}
	mock.recorder = &MockRawBotMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRawBot) EXPECT() *MockRawBotMockRecorder {
	return m.recorder
}

// GetReadyHandler mocks base method.
func (m *MockRawBot) GetReadyHandler(ctx context.Context, snapshot SnapshotInspector) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "GetReadyHandler", ctx, snapshot)
}

// GetReadyHandler indicates an expected call of GetReadyHandler.
func (mr *MockRawBotMockRecorder) GetReadyHandler(ctx, snapshot interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetReadyHandler", reflect.TypeOf((*MockRawBot)(nil).GetReadyHandler), ctx, snapshot)
}

// TurnHandler mocks base method.
func (m *MockRawBot) TurnHandler(ctx context.Context, snapshot SnapshotInspector) ([]proto.PlayerOrder, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TurnHandler", ctx, snapshot)
	ret0, _ := ret[0].([]proto.PlayerOrder)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// TurnHandler indicates an expected call of TurnHandler.
func (mr *MockRawBotMockRecorder) TurnHandler(ctx, snapshot interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TurnHandler", reflect.TypeOf((*MockRawBot)(nil).TurnHandler), ctx, snapshot)
}

// MockBot is a mock of Bot interface.
type MockBot struct {
	ctrl     *gomock.Controller
	recorder *MockBotMockRecorder
}

// MockBotMockRecorder is the mock recorder for MockBot.
type MockBotMockRecorder struct {
	mock *MockBot
}

// NewMockBot creates a new mock instance.
func NewMockBot(ctrl *gomock.Controller) *MockBot {
	mock := &MockBot{ctrl: ctrl}
	mock.recorder = &MockBotMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBot) EXPECT() *MockBotMockRecorder {
	return m.recorder
}

// AsGoalkeeper mocks base method.
func (m *MockBot) AsGoalkeeper(ctx context.Context, snapshot SnapshotInspector, state PlayerState) ([]proto.PlayerOrder, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AsGoalkeeper", ctx, snapshot, state)
	ret0, _ := ret[0].([]proto.PlayerOrder)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// AsGoalkeeper indicates an expected call of AsGoalkeeper.
func (mr *MockBotMockRecorder) AsGoalkeeper(ctx, snapshot, state interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AsGoalkeeper", reflect.TypeOf((*MockBot)(nil).AsGoalkeeper), ctx, snapshot, state)
}

// OnDefending mocks base method.
func (m *MockBot) OnDefending(ctx context.Context, snapshot SnapshotInspector) ([]proto.PlayerOrder, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OnDefending", ctx, snapshot)
	ret0, _ := ret[0].([]proto.PlayerOrder)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// OnDefending indicates an expected call of OnDefending.
func (mr *MockBotMockRecorder) OnDefending(ctx, snapshot interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OnDefending", reflect.TypeOf((*MockBot)(nil).OnDefending), ctx, snapshot)
}

// OnDisputing mocks base method.
func (m *MockBot) OnDisputing(ctx context.Context, snapshot SnapshotInspector) ([]proto.PlayerOrder, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OnDisputing", ctx, snapshot)
	ret0, _ := ret[0].([]proto.PlayerOrder)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// OnDisputing indicates an expected call of OnDisputing.
func (mr *MockBotMockRecorder) OnDisputing(ctx, snapshot interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OnDisputing", reflect.TypeOf((*MockBot)(nil).OnDisputing), ctx, snapshot)
}

// OnGetReady mocks base method.
func (m *MockBot) OnGetReady(ctx context.Context, snapshot SnapshotInspector) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "OnGetReady", ctx, snapshot)
}

// OnGetReady indicates an expected call of OnGetReady.
func (mr *MockBotMockRecorder) OnGetReady(ctx, snapshot interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OnGetReady", reflect.TypeOf((*MockBot)(nil).OnGetReady), ctx, snapshot)
}

// OnHolding mocks base method.
func (m *MockBot) OnHolding(ctx context.Context, snapshot SnapshotInspector) ([]proto.PlayerOrder, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OnHolding", ctx, snapshot)
	ret0, _ := ret[0].([]proto.PlayerOrder)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// OnHolding indicates an expected call of OnHolding.
func (mr *MockBotMockRecorder) OnHolding(ctx, snapshot interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OnHolding", reflect.TypeOf((*MockBot)(nil).OnHolding), ctx, snapshot)
}

// OnSupporting mocks base method.
func (m *MockBot) OnSupporting(ctx context.Context, snapshot SnapshotInspector) ([]proto.PlayerOrder, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OnSupporting", ctx, snapshot)
	ret0, _ := ret[0].([]proto.PlayerOrder)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// OnSupporting indicates an expected call of OnSupporting.
func (mr *MockBotMockRecorder) OnSupporting(ctx, snapshot interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OnSupporting", reflect.TypeOf((*MockBot)(nil).OnSupporting), ctx, snapshot)
}

// MockSnapshotInspector is a mock of SnapshotInspector interface.
type MockSnapshotInspector struct {
	ctrl     *gomock.Controller
	recorder *MockSnapshotInspectorMockRecorder
}

// MockSnapshotInspectorMockRecorder is the mock recorder for MockSnapshotInspector.
type MockSnapshotInspectorMockRecorder struct {
	mock *MockSnapshotInspector
}

// NewMockSnapshotInspector creates a new mock instance.
func NewMockSnapshotInspector(ctrl *gomock.Controller) *MockSnapshotInspector {
	mock := &MockSnapshotInspector{ctrl: ctrl}
	mock.recorder = &MockSnapshotInspectorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSnapshotInspector) EXPECT() *MockSnapshotInspectorMockRecorder {
	return m.recorder
}

// GetBall mocks base method.
func (m *MockSnapshotInspector) GetBall() *proto.Ball {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBall")
	ret0, _ := ret[0].(*proto.Ball)
	return ret0
}

// GetBall indicates an expected call of GetBall.
func (mr *MockSnapshotInspectorMockRecorder) GetBall() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBall", reflect.TypeOf((*MockSnapshotInspector)(nil).GetBall))
}

// GetBallHolder mocks base method.
func (m *MockSnapshotInspector) GetBallHolder() (*proto.Player, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBallHolder")
	ret0, _ := ret[0].(*proto.Player)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// GetBallHolder indicates an expected call of GetBallHolder.
func (mr *MockSnapshotInspectorMockRecorder) GetBallHolder() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBallHolder", reflect.TypeOf((*MockSnapshotInspector)(nil).GetBallHolder))
}

// GetMe mocks base method.
func (m *MockSnapshotInspector) GetMe() *proto.Player {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMe")
	ret0, _ := ret[0].(*proto.Player)
	return ret0
}

// GetMe indicates an expected call of GetMe.
func (mr *MockSnapshotInspectorMockRecorder) GetMe() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMe", reflect.TypeOf((*MockSnapshotInspector)(nil).GetMe))
}

// GetMyTeam mocks base method.
func (m *MockSnapshotInspector) GetMyTeam() *proto.Team {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMyTeam")
	ret0, _ := ret[0].(*proto.Team)
	return ret0
}

// GetMyTeam indicates an expected call of GetMyTeam.
func (mr *MockSnapshotInspectorMockRecorder) GetMyTeam() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMyTeam", reflect.TypeOf((*MockSnapshotInspector)(nil).GetMyTeam))
}

// GetMyTeamPlayers mocks base method.
func (m *MockSnapshotInspector) GetMyTeamPlayers() []*proto.Player {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMyTeamPlayers")
	ret0, _ := ret[0].([]*proto.Player)
	return ret0
}

// GetMyTeamPlayers indicates an expected call of GetMyTeamPlayers.
func (mr *MockSnapshotInspectorMockRecorder) GetMyTeamPlayers() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMyTeamPlayers", reflect.TypeOf((*MockSnapshotInspector)(nil).GetMyTeamPlayers))
}

// GetMyTeamSide mocks base method.
func (m *MockSnapshotInspector) GetMyTeamSide() proto.Team_Side {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMyTeamSide")
	ret0, _ := ret[0].(proto.Team_Side)
	return ret0
}

// GetMyTeamSide indicates an expected call of GetMyTeamSide.
func (mr *MockSnapshotInspectorMockRecorder) GetMyTeamSide() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMyTeamSide", reflect.TypeOf((*MockSnapshotInspector)(nil).GetMyTeamSide))
}

// GetOpponentMyTeam mocks base method.
func (m *MockSnapshotInspector) GetOpponentMyTeam() *proto.Team {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOpponentTeam")
	ret0, _ := ret[0].(*proto.Team)
	return ret0
}

// GetOpponentMyTeam indicates an expected call of GetOpponentMyTeam.
func (mr *MockSnapshotInspectorMockRecorder) GetOpponentMyTeam() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOpponentTeam", reflect.TypeOf((*MockSnapshotInspector)(nil).GetOpponentMyTeam))
}

// GetOpponentPlayers mocks base method.
func (m *MockSnapshotInspector) GetOpponentPlayers() []*proto.Player {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOpponentPlayers")
	ret0, _ := ret[0].([]*proto.Player)
	return ret0
}

// GetOpponentPlayers indicates an expected call of GetOpponentPlayers.
func (mr *MockSnapshotInspectorMockRecorder) GetOpponentPlayers() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOpponentPlayers", reflect.TypeOf((*MockSnapshotInspector)(nil).GetOpponentPlayers))
}

// GetOpponentSide mocks base method.
func (m *MockSnapshotInspector) GetOpponentSide() proto.Team_Side {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOpponentSide")
	ret0, _ := ret[0].(proto.Team_Side)
	return ret0
}

// GetOpponentSide indicates an expected call of GetOpponentSide.
func (mr *MockSnapshotInspectorMockRecorder) GetOpponentSide() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOpponentSide", reflect.TypeOf((*MockSnapshotInspector)(nil).GetOpponentSide))
}

// GetPlayer mocks base method.
func (m *MockSnapshotInspector) GetPlayer(side proto.Team_Side, number int) *proto.Player {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPlayer", side, number)
	ret0, _ := ret[0].(*proto.Player)
	return ret0
}

// GetPlayer indicates an expected call of GetPlayer.
func (mr *MockSnapshotInspectorMockRecorder) GetPlayer(side, number interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPlayer", reflect.TypeOf((*MockSnapshotInspector)(nil).GetPlayer), side, number)
}

// GetSnapshot mocks base method.
func (m *MockSnapshotInspector) GetSnapshot() *proto.GameSnapshot {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSnapshot")
	ret0, _ := ret[0].(*proto.GameSnapshot)
	return ret0
}

// GetSnapshot indicates an expected call of GetSnapshot.
func (mr *MockSnapshotInspectorMockRecorder) GetSnapshot() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSnapshot", reflect.TypeOf((*MockSnapshotInspector)(nil).GetSnapshot))
}

// GetTeam mocks base method.
func (m *MockSnapshotInspector) GetTeam(side proto.Team_Side) *proto.Team {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTeam", side)
	ret0, _ := ret[0].(*proto.Team)
	return ret0
}

// GetTeam indicates an expected call of GetTeam.
func (mr *MockSnapshotInspectorMockRecorder) GetTeam(side interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTeam", reflect.TypeOf((*MockSnapshotInspector)(nil).GetTeam), side)
}

// IsBallHolder mocks base method.
func (m *MockSnapshotInspector) IsBallHolder(player *proto.Player) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsBallHolder", player)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsBallHolder indicates an expected call of IsBallHolder.
func (mr *MockSnapshotInspectorMockRecorder) IsBallHolder(player interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsBallHolder", reflect.TypeOf((*MockSnapshotInspector)(nil).IsBallHolder), player)
}

// MakeOrderCatch mocks base method.
func (m *MockSnapshotInspector) MakeOrderCatch() *proto.Order_Catch {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MakeOrderCatch")
	ret0, _ := ret[0].(*proto.Order_Catch)
	return ret0
}

// MakeOrderCatch indicates an expected call of MakeOrderCatch.
func (mr *MockSnapshotInspectorMockRecorder) MakeOrderCatch() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MakeOrderCatch", reflect.TypeOf((*MockSnapshotInspector)(nil).MakeOrderCatch))
}

// MakeOrderJump mocks base method.
func (m *MockSnapshotInspector) MakeOrderJump(target proto.Point, speed float64) (*proto.Order_Jump, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MakeOrderJump", target, speed)
	ret0, _ := ret[0].(*proto.Order_Jump)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MakeOrderJump indicates an expected call of MakeOrderJump.
func (mr *MockSnapshotInspectorMockRecorder) MakeOrderJump(target, speed interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MakeOrderJump", reflect.TypeOf((*MockSnapshotInspector)(nil).MakeOrderJump), target, speed)
}

// MakeOrderKick mocks base method.
func (m *MockSnapshotInspector) MakeOrderKick(target proto.Point, speed float64) (*proto.Order_Kick, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MakeOrderKick", target, speed)
	ret0, _ := ret[0].(*proto.Order_Kick)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MakeOrderKick indicates an expected call of MakeOrderKick.
func (mr *MockSnapshotInspectorMockRecorder) MakeOrderKick(target, speed interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MakeOrderKick", reflect.TypeOf((*MockSnapshotInspector)(nil).MakeOrderKick), target, speed)
}

// MakeOrderKickMaxSpeed mocks base method.
func (m *MockSnapshotInspector) MakeOrderKickMaxSpeed(target proto.Point) (*proto.Order_Kick, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MakeOrderKickMaxSpeed", target)
	ret0, _ := ret[0].(*proto.Order_Kick)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MakeOrderKickMaxSpeed indicates an expected call of MakeOrderKickMaxSpeed.
func (mr *MockSnapshotInspectorMockRecorder) MakeOrderKickMaxSpeed(target interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MakeOrderKickMaxSpeed", reflect.TypeOf((*MockSnapshotInspector)(nil).MakeOrderKickMaxSpeed), target)
}

// MakeOrderMoveByDirection mocks base method.
func (m *MockSnapshotInspector) MakeOrderMoveByDirection(direction mapper.Direction, speed float64) *proto.Order_Move {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MakeOrderMoveByDirection", direction, speed)
	ret0, _ := ret[0].(*proto.Order_Move)
	return ret0
}

// MakeOrderMoveByDirection indicates an expected call of MakeOrderMoveByDirection.
func (mr *MockSnapshotInspectorMockRecorder) MakeOrderMoveByDirection(direction, speed interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MakeOrderMoveByDirection", reflect.TypeOf((*MockSnapshotInspector)(nil).MakeOrderMoveByDirection), direction, speed)
}

// MakeOrderMoveFromPoint mocks base method.
func (m *MockSnapshotInspector) MakeOrderMoveFromPoint(origin, target proto.Point, speed float64) (*proto.Order_Move, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MakeOrderMoveFromPoint", origin, target, speed)
	ret0, _ := ret[0].(*proto.Order_Move)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MakeOrderMoveFromPoint indicates an expected call of MakeOrderMoveFromPoint.
func (mr *MockSnapshotInspectorMockRecorder) MakeOrderMoveFromPoint(origin, target, speed interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MakeOrderMoveFromPoint", reflect.TypeOf((*MockSnapshotInspector)(nil).MakeOrderMoveFromPoint), origin, target, speed)
}

// MakeOrderMoveFromVector mocks base method.
func (m *MockSnapshotInspector) MakeOrderMoveFromVector(vector proto.Vector, speed float64) *proto.Order_Move {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MakeOrderMoveFromVector", vector, speed)
	ret0, _ := ret[0].(*proto.Order_Move)
	return ret0
}

// MakeOrderMoveFromVector indicates an expected call of MakeOrderMoveFromVector.
func (mr *MockSnapshotInspectorMockRecorder) MakeOrderMoveFromVector(vector, speed interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MakeOrderMoveFromVector", reflect.TypeOf((*MockSnapshotInspector)(nil).MakeOrderMoveFromVector), vector, speed)
}

// MakeOrderMoveMaxSpeed mocks base method.
func (m *MockSnapshotInspector) MakeOrderMoveMaxSpeed(target proto.Point) (*proto.Order_Move, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MakeOrderMoveMaxSpeed", target)
	ret0, _ := ret[0].(*proto.Order_Move)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MakeOrderMoveMaxSpeed indicates an expected call of MakeOrderMoveMaxSpeed.
func (mr *MockSnapshotInspectorMockRecorder) MakeOrderMoveMaxSpeed(target interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MakeOrderMoveMaxSpeed", reflect.TypeOf((*MockSnapshotInspector)(nil).MakeOrderMoveMaxSpeed), target)
}

// MockLogger is a mock of Logger interface.
type MockLogger struct {
	ctrl     *gomock.Controller
	recorder *MockLoggerMockRecorder
}

// MockLoggerMockRecorder is the mock recorder for MockLogger.
type MockLoggerMockRecorder struct {
	mock *MockLogger
}

// NewMockLogger creates a new mock instance.
func NewMockLogger(ctrl *gomock.Controller) *MockLogger {
	mock := &MockLogger{ctrl: ctrl}
	mock.recorder = &MockLoggerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLogger) EXPECT() *MockLoggerMockRecorder {
	return m.recorder
}

// Debug mocks base method.
func (m *MockLogger) Debug(args ...interface{}) {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Debug", varargs...)
}

// Debug indicates an expected call of Debug.
func (mr *MockLoggerMockRecorder) Debug(args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Debug", reflect.TypeOf((*MockLogger)(nil).Debug), args...)
}

// Debugf mocks base method.
func (m *MockLogger) Debugf(template string, args ...interface{}) {
	m.ctrl.T.Helper()
	varargs := []interface{}{template}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Debugf", varargs...)
}

// Debugf indicates an expected call of Debugf.
func (mr *MockLoggerMockRecorder) Debugf(template interface{}, args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{template}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Debugf", reflect.TypeOf((*MockLogger)(nil).Debugf), varargs...)
}

// Errorf mocks base method.
func (m *MockLogger) Errorf(template string, args ...interface{}) {
	m.ctrl.T.Helper()
	varargs := []interface{}{template}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Errorf", varargs...)
}

// Errorf indicates an expected call of Errorf.
func (mr *MockLoggerMockRecorder) Errorf(template interface{}, args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{template}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Errorf", reflect.TypeOf((*MockLogger)(nil).Errorf), varargs...)
}

// Fatalf mocks base method.
func (m *MockLogger) Fatalf(template string, args ...interface{}) {
	m.ctrl.T.Helper()
	varargs := []interface{}{template}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Fatalf", varargs...)
}

// Fatalf indicates an expected call of Fatalf.
func (mr *MockLoggerMockRecorder) Fatalf(template interface{}, args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{template}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Fatalf", reflect.TypeOf((*MockLogger)(nil).Fatalf), varargs...)
}

// Infof mocks base method.
func (m *MockLogger) Infof(template string, args ...interface{}) {
	m.ctrl.T.Helper()
	varargs := []interface{}{template}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Infof", varargs...)
}

// Infof indicates an expected call of Infof.
func (mr *MockLoggerMockRecorder) Infof(template interface{}, args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{template}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Infof", reflect.TypeOf((*MockLogger)(nil).Infof), varargs...)
}

// Warnf mocks base method.
func (m *MockLogger) Warnf(template string, args ...interface{}) {
	m.ctrl.T.Helper()
	varargs := []interface{}{template}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Warnf", varargs...)
}

// Warnf indicates an expected call of Warnf.
func (mr *MockLoggerMockRecorder) Warnf(template interface{}, args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{template}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Warnf", reflect.TypeOf((*MockLogger)(nil).Warnf), varargs...)
}

// MockOrderSender is a mock of OrderSender interface.
type MockOrderSender struct {
	ctrl     *gomock.Controller
	recorder *MockOrderSenderMockRecorder
}

// MockOrderSenderMockRecorder is the mock recorder for MockOrderSender.
type MockOrderSenderMockRecorder struct {
	mock *MockOrderSender
}

// NewMockOrderSender creates a new mock instance.
func NewMockOrderSender(ctrl *gomock.Controller) *MockOrderSender {
	mock := &MockOrderSender{ctrl: ctrl}
	mock.recorder = &MockOrderSenderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOrderSender) EXPECT() *MockOrderSenderMockRecorder {
	return m.recorder
}

// Send mocks base method.
func (m *MockOrderSender) Send(ctx context.Context, turn uint32, orders []proto.PlayerOrder, debugMsg string) (*proto.OrderResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", ctx, turn, orders, debugMsg)
	ret0, _ := ret[0].(*proto.OrderResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Send indicates an expected call of Send.
func (mr *MockOrderSenderMockRecorder) Send(ctx, turn, orders, debugMsg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockOrderSender)(nil).Send), ctx, turn, orders, debugMsg)
}
