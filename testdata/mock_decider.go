// Code generated by MockGen. DO NOT EDIT.
// Source: coach/decider.go

// Package testdata is a generated GoMock package.
package testdata

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	coach "github.com/lugobots/lugo4go/v2/coach"
	reflect "reflect"
)

// MockDecider is a mock of Decider interface
type MockDecider struct {
	ctrl     *gomock.Controller
	recorder *MockDeciderMockRecorder
}

// MockDeciderMockRecorder is the mock recorder for MockDecider
type MockDeciderMockRecorder struct {
	mock *MockDecider
}

// NewMockDecider creates a new mock instance
func NewMockDecider(ctrl *gomock.Controller) *MockDecider {
	mock := &MockDecider{ctrl: ctrl}
	mock.recorder = &MockDeciderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockDecider) EXPECT() *MockDeciderMockRecorder {
	return m.recorder
}

// OnDisputing mocks base method
func (m *MockDecider) OnDisputing(ctx context.Context, data coach.TurnData) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OnDisputing", ctx, data)
	ret0, _ := ret[0].(error)
	return ret0
}

// OnDisputing indicates an expected call of OnDisputing
func (mr *MockDeciderMockRecorder) OnDisputing(ctx, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OnDisputing", reflect.TypeOf((*MockDecider)(nil).OnDisputing), ctx, data)
}

// OnDefending mocks base method
func (m *MockDecider) OnDefending(ctx context.Context, data coach.TurnData) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OnDefending", ctx, data)
	ret0, _ := ret[0].(error)
	return ret0
}

// OnDefending indicates an expected call of OnDefending
func (mr *MockDeciderMockRecorder) OnDefending(ctx, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OnDefending", reflect.TypeOf((*MockDecider)(nil).OnDefending), ctx, data)
}

// OnHolding mocks base method
func (m *MockDecider) OnHolding(ctx context.Context, data coach.TurnData) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OnHolding", ctx, data)
	ret0, _ := ret[0].(error)
	return ret0
}

// OnHolding indicates an expected call of OnHolding
func (mr *MockDeciderMockRecorder) OnHolding(ctx, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OnHolding", reflect.TypeOf((*MockDecider)(nil).OnHolding), ctx, data)
}

// OnSupporting mocks base method
func (m *MockDecider) OnSupporting(ctx context.Context, data coach.TurnData) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OnSupporting", ctx, data)
	ret0, _ := ret[0].(error)
	return ret0
}

// OnSupporting indicates an expected call of OnSupporting
func (mr *MockDeciderMockRecorder) OnSupporting(ctx, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OnSupporting", reflect.TypeOf((*MockDecider)(nil).OnSupporting), ctx, data)
}

// AsGoalkeeper mocks base method
func (m *MockDecider) AsGoalkeeper(ctx context.Context, data coach.TurnData) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AsGoalkeeper", ctx, data)
	ret0, _ := ret[0].(error)
	return ret0
}

// AsGoalkeeper indicates an expected call of AsGoalkeeper
func (mr *MockDeciderMockRecorder) AsGoalkeeper(ctx, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AsGoalkeeper", reflect.TypeOf((*MockDecider)(nil).AsGoalkeeper), ctx, data)
}
