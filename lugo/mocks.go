// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/lugobots/lugo4go/v2/lugo (interfaces: PlayerOrder,GameServer,GameClient,Game_JoinATeamClient,Game_JoinATeamServer)

// Package lugo is a generated GoMock package.
package lugo

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	grpc "google.golang.org/grpc"
	metadata "google.golang.org/grpc/metadata"
	reflect "reflect"
)

// MockPlayerOrder is a mock of PlayerOrder interface
type MockPlayerOrder struct {
	ctrl     *gomock.Controller
	recorder *MockPlayerOrderMockRecorder
}

// MockPlayerOrderMockRecorder is the mock recorder for MockPlayerOrder
type MockPlayerOrderMockRecorder struct {
	mock *MockPlayerOrder
}

// NewMockPlayerOrder creates a new mock instance
func NewMockPlayerOrder(ctrl *gomock.Controller) *MockPlayerOrder {
	mock := &MockPlayerOrder{ctrl: ctrl}
	mock.recorder = &MockPlayerOrderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockPlayerOrder) EXPECT() *MockPlayerOrderMockRecorder {
	return m.recorder
}

// LugoOrdersUnifier mocks base method
func (m *MockPlayerOrder) LugoOrdersUnifier() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "LugoOrdersUnifier")
}

// LugoOrdersUnifier indicates an expected call of LugoOrdersUnifier
func (mr *MockPlayerOrderMockRecorder) LugoOrdersUnifier() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LugoOrdersUnifier", reflect.TypeOf((*MockPlayerOrder)(nil).LugoOrdersUnifier))
}

// isOrder_Action mocks base method
func (m *MockPlayerOrder) isOrder_Action() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "isOrder_Action")
}

// isOrder_Action indicates an expected call of isOrder_Action
func (mr *MockPlayerOrderMockRecorder) isOrder_Action() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "isOrder_Action", reflect.TypeOf((*MockPlayerOrder)(nil).isOrder_Action))
}

// MockGameServer is a mock of GameServer interface
type MockGameServer struct {
	ctrl     *gomock.Controller
	recorder *MockGameServerMockRecorder
}

// MockGameServerMockRecorder is the mock recorder for MockGameServer
type MockGameServerMockRecorder struct {
	mock *MockGameServer
}

// NewMockGameServer creates a new mock instance
func NewMockGameServer(ctrl *gomock.Controller) *MockGameServer {
	mock := &MockGameServer{ctrl: ctrl}
	mock.recorder = &MockGameServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockGameServer) EXPECT() *MockGameServerMockRecorder {
	return m.recorder
}

// JoinATeam mocks base method
func (m *MockGameServer) JoinATeam(arg0 *JoinRequest, arg1 Game_JoinATeamServer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "JoinATeam", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// JoinATeam indicates an expected call of JoinATeam
func (mr *MockGameServerMockRecorder) JoinATeam(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "JoinATeam", reflect.TypeOf((*MockGameServer)(nil).JoinATeam), arg0, arg1)
}

// SendOrders mocks base method
func (m *MockGameServer) SendOrders(arg0 context.Context, arg1 *OrderSet) (*OrderResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendOrders", arg0, arg1)
	ret0, _ := ret[0].(*OrderResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendOrders indicates an expected call of SendOrders
func (mr *MockGameServerMockRecorder) SendOrders(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendOrders", reflect.TypeOf((*MockGameServer)(nil).SendOrders), arg0, arg1)
}

// MockGameClient is a mock of GameClient interface
type MockGameClient struct {
	ctrl     *gomock.Controller
	recorder *MockGameClientMockRecorder
}

// MockGameClientMockRecorder is the mock recorder for MockGameClient
type MockGameClientMockRecorder struct {
	mock *MockGameClient
}

// NewMockGameClient creates a new mock instance
func NewMockGameClient(ctrl *gomock.Controller) *MockGameClient {
	mock := &MockGameClient{ctrl: ctrl}
	mock.recorder = &MockGameClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockGameClient) EXPECT() *MockGameClientMockRecorder {
	return m.recorder
}

// JoinATeam mocks base method
func (m *MockGameClient) JoinATeam(arg0 context.Context, arg1 *JoinRequest, arg2 ...grpc.CallOption) (Game_JoinATeamClient, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "JoinATeam", varargs...)
	ret0, _ := ret[0].(Game_JoinATeamClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// JoinATeam indicates an expected call of JoinATeam
func (mr *MockGameClientMockRecorder) JoinATeam(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "JoinATeam", reflect.TypeOf((*MockGameClient)(nil).JoinATeam), varargs...)
}

// SendOrders mocks base method
func (m *MockGameClient) SendOrders(arg0 context.Context, arg1 *OrderSet, arg2 ...grpc.CallOption) (*OrderResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SendOrders", varargs...)
	ret0, _ := ret[0].(*OrderResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendOrders indicates an expected call of SendOrders
func (mr *MockGameClientMockRecorder) SendOrders(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendOrders", reflect.TypeOf((*MockGameClient)(nil).SendOrders), varargs...)
}

// MockGame_JoinATeamClient is a mock of Game_JoinATeamClient interface
type MockGame_JoinATeamClient struct {
	ctrl     *gomock.Controller
	recorder *MockGame_JoinATeamClientMockRecorder
}

// MockGame_JoinATeamClientMockRecorder is the mock recorder for MockGame_JoinATeamClient
type MockGame_JoinATeamClientMockRecorder struct {
	mock *MockGame_JoinATeamClient
}

// NewMockGame_JoinATeamClient creates a new mock instance
func NewMockGame_JoinATeamClient(ctrl *gomock.Controller) *MockGame_JoinATeamClient {
	mock := &MockGame_JoinATeamClient{ctrl: ctrl}
	mock.recorder = &MockGame_JoinATeamClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockGame_JoinATeamClient) EXPECT() *MockGame_JoinATeamClientMockRecorder {
	return m.recorder
}

// CloseSend mocks base method
func (m *MockGame_JoinATeamClient) CloseSend() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseSend")
	ret0, _ := ret[0].(error)
	return ret0
}

// CloseSend indicates an expected call of CloseSend
func (mr *MockGame_JoinATeamClientMockRecorder) CloseSend() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseSend", reflect.TypeOf((*MockGame_JoinATeamClient)(nil).CloseSend))
}

// Context mocks base method
func (m *MockGame_JoinATeamClient) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context
func (mr *MockGame_JoinATeamClientMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockGame_JoinATeamClient)(nil).Context))
}

// Header mocks base method
func (m *MockGame_JoinATeamClient) Header() (metadata.MD, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Header")
	ret0, _ := ret[0].(metadata.MD)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Header indicates an expected call of Header
func (mr *MockGame_JoinATeamClientMockRecorder) Header() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Header", reflect.TypeOf((*MockGame_JoinATeamClient)(nil).Header))
}

// Recv mocks base method
func (m *MockGame_JoinATeamClient) Recv() (*GameSnapshot, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Recv")
	ret0, _ := ret[0].(*GameSnapshot)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Recv indicates an expected call of Recv
func (mr *MockGame_JoinATeamClientMockRecorder) Recv() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Recv", reflect.TypeOf((*MockGame_JoinATeamClient)(nil).Recv))
}

// RecvMsg mocks base method
func (m *MockGame_JoinATeamClient) RecvMsg(arg0 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RecvMsg", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg
func (mr *MockGame_JoinATeamClientMockRecorder) RecvMsg(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockGame_JoinATeamClient)(nil).RecvMsg), arg0)
}

// SendMsg mocks base method
func (m *MockGame_JoinATeamClient) SendMsg(arg0 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendMsg", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg
func (mr *MockGame_JoinATeamClientMockRecorder) SendMsg(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockGame_JoinATeamClient)(nil).SendMsg), arg0)
}

// Trailer mocks base method
func (m *MockGame_JoinATeamClient) Trailer() metadata.MD {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Trailer")
	ret0, _ := ret[0].(metadata.MD)
	return ret0
}

// Trailer indicates an expected call of Trailer
func (mr *MockGame_JoinATeamClientMockRecorder) Trailer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Trailer", reflect.TypeOf((*MockGame_JoinATeamClient)(nil).Trailer))
}

// MockGame_JoinATeamServer is a mock of Game_JoinATeamServer interface
type MockGame_JoinATeamServer struct {
	ctrl     *gomock.Controller
	recorder *MockGame_JoinATeamServerMockRecorder
}

// MockGame_JoinATeamServerMockRecorder is the mock recorder for MockGame_JoinATeamServer
type MockGame_JoinATeamServerMockRecorder struct {
	mock *MockGame_JoinATeamServer
}

// NewMockGame_JoinATeamServer creates a new mock instance
func NewMockGame_JoinATeamServer(ctrl *gomock.Controller) *MockGame_JoinATeamServer {
	mock := &MockGame_JoinATeamServer{ctrl: ctrl}
	mock.recorder = &MockGame_JoinATeamServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockGame_JoinATeamServer) EXPECT() *MockGame_JoinATeamServerMockRecorder {
	return m.recorder
}

// Context mocks base method
func (m *MockGame_JoinATeamServer) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context
func (mr *MockGame_JoinATeamServerMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockGame_JoinATeamServer)(nil).Context))
}

// RecvMsg mocks base method
func (m *MockGame_JoinATeamServer) RecvMsg(arg0 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RecvMsg", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg
func (mr *MockGame_JoinATeamServerMockRecorder) RecvMsg(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockGame_JoinATeamServer)(nil).RecvMsg), arg0)
}

// Send mocks base method
func (m *MockGame_JoinATeamServer) Send(arg0 *GameSnapshot) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send
func (mr *MockGame_JoinATeamServerMockRecorder) Send(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockGame_JoinATeamServer)(nil).Send), arg0)
}

// SendHeader mocks base method
func (m *MockGame_JoinATeamServer) SendHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendHeader indicates an expected call of SendHeader
func (mr *MockGame_JoinATeamServerMockRecorder) SendHeader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendHeader", reflect.TypeOf((*MockGame_JoinATeamServer)(nil).SendHeader), arg0)
}

// SendMsg mocks base method
func (m *MockGame_JoinATeamServer) SendMsg(arg0 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendMsg", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg
func (mr *MockGame_JoinATeamServerMockRecorder) SendMsg(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockGame_JoinATeamServer)(nil).SendMsg), arg0)
}

// SetHeader mocks base method
func (m *MockGame_JoinATeamServer) SetHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetHeader indicates an expected call of SetHeader
func (mr *MockGame_JoinATeamServerMockRecorder) SetHeader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetHeader", reflect.TypeOf((*MockGame_JoinATeamServer)(nil).SetHeader), arg0)
}

// SetTrailer mocks base method
func (m *MockGame_JoinATeamServer) SetTrailer(arg0 metadata.MD) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetTrailer", arg0)
}

// SetTrailer indicates an expected call of SetTrailer
func (mr *MockGame_JoinATeamServerMockRecorder) SetTrailer(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTrailer", reflect.TypeOf((*MockGame_JoinATeamServer)(nil).SetTrailer), arg0)
}
