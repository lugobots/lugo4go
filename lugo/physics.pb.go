// Code generated by protoc-gen-go. DO NOT EDIT.
// source: proto/physics.proto

package lugo

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

//
// Vector represent one direction on a cartesian plan
type Vector struct {
	// Coordinate X to define the vector direction.
	X float64 `protobuf:"fixed64,1,opt,name=X,proto3" json:"X,omitempty"`
	// Coordinate Y to define the vector direction.
	Y                    float64  `protobuf:"fixed64,2,opt,name=Y,proto3" json:"Y,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Vector) Reset()         { *m = Vector{} }
func (m *Vector) String() string { return proto.CompactTextString(m) }
func (*Vector) ProtoMessage()    {}
func (*Vector) Descriptor() ([]byte, []int) {
	return fileDescriptor_84c903b50bd7b58f, []int{0}
}

func (m *Vector) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Vector.Unmarshal(m, b)
}
func (m *Vector) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Vector.Marshal(b, m, deterministic)
}
func (m *Vector) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Vector.Merge(m, src)
}
func (m *Vector) XXX_Size() int {
	return xxx_messageInfo_Vector.Size(m)
}
func (m *Vector) XXX_DiscardUnknown() {
	xxx_messageInfo_Vector.DiscardUnknown(m)
}

var xxx_messageInfo_Vector proto.InternalMessageInfo

func (m *Vector) GetX() float64 {
	if m != nil {
		return m.X
	}
	return 0
}

func (m *Vector) GetY() float64 {
	if m != nil {
		return m.Y
	}
	return 0
}

//
// Point represents one position on the cartesian plan of the game field.
// The coordinates start at the left bottom corner from the top view .
type Point struct {
	// Distance from the Y axis to right.
	X int32 `protobuf:"varint,1,opt,name=X,proto3" json:"X,omitempty"`
	// Distance from the X axis to up.
	Y                    int32    `protobuf:"varint,2,opt,name=Y,proto3" json:"Y,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Point) Reset()         { *m = Point{} }
func (m *Point) String() string { return proto.CompactTextString(m) }
func (*Point) ProtoMessage()    {}
func (*Point) Descriptor() ([]byte, []int) {
	return fileDescriptor_84c903b50bd7b58f, []int{1}
}

func (m *Point) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Point.Unmarshal(m, b)
}
func (m *Point) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Point.Marshal(b, m, deterministic)
}
func (m *Point) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Point.Merge(m, src)
}
func (m *Point) XXX_Size() int {
	return xxx_messageInfo_Point.Size(m)
}
func (m *Point) XXX_DiscardUnknown() {
	xxx_messageInfo_Point.DiscardUnknown(m)
}

var xxx_messageInfo_Point proto.InternalMessageInfo

func (m *Point) GetX() int32 {
	if m != nil {
		return m.X
	}
	return 0
}

func (m *Point) GetY() int32 {
	if m != nil {
		return m.Y
	}
	return 0
}

//
// Velocity is a tuple with the direction (a vector) an a speed (float) values.
// It defines the velocity of an object.
type Velocity struct {
	// Direction is a normalised vector that indicates the element direction
	Direction *Vector `protobuf:"bytes,1,opt,name=direction,proto3" json:"direction,omitempty"`
	// Speed of the element.
	Speed                float64  `protobuf:"fixed64,2,opt,name=speed,proto3" json:"speed,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Velocity) Reset()         { *m = Velocity{} }
func (m *Velocity) String() string { return proto.CompactTextString(m) }
func (*Velocity) ProtoMessage()    {}
func (*Velocity) Descriptor() ([]byte, []int) {
	return fileDescriptor_84c903b50bd7b58f, []int{2}
}

func (m *Velocity) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Velocity.Unmarshal(m, b)
}
func (m *Velocity) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Velocity.Marshal(b, m, deterministic)
}
func (m *Velocity) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Velocity.Merge(m, src)
}
func (m *Velocity) XXX_Size() int {
	return xxx_messageInfo_Velocity.Size(m)
}
func (m *Velocity) XXX_DiscardUnknown() {
	xxx_messageInfo_Velocity.DiscardUnknown(m)
}

var xxx_messageInfo_Velocity proto.InternalMessageInfo

func (m *Velocity) GetDirection() *Vector {
	if m != nil {
		return m.Direction
	}
	return nil
}

func (m *Velocity) GetSpeed() float64 {
	if m != nil {
		return m.Speed
	}
	return 0
}

func init() {
	proto.RegisterType((*Vector)(nil), "lugo.Vector")
	proto.RegisterType((*Point)(nil), "lugo.Point")
	proto.RegisterType((*Velocity)(nil), "lugo.Velocity")
}

func init() {
	proto.RegisterFile("proto/physics.proto", fileDescriptor_84c903b50bd7b58f)
}

var fileDescriptor_84c903b50bd7b58f = []byte{
	// 153 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0x2e, 0x28, 0xca, 0x2f,
	0xc9, 0xd7, 0x2f, 0xc8, 0xa8, 0x2c, 0xce, 0x4c, 0x2e, 0xd6, 0x03, 0xf3, 0x84, 0x58, 0x72, 0x4a,
	0xd3, 0xf3, 0x95, 0x54, 0xb8, 0xd8, 0xc2, 0x52, 0x93, 0x4b, 0xf2, 0x8b, 0x84, 0x78, 0xb8, 0x18,
	0x23, 0x24, 0x18, 0x15, 0x18, 0x35, 0x18, 0x83, 0x18, 0x23, 0x40, 0xbc, 0x48, 0x09, 0x26, 0x08,
	0x2f, 0x52, 0x49, 0x99, 0x8b, 0x35, 0x20, 0x3f, 0x33, 0xaf, 0x04, 0xa1, 0x88, 0x15, 0x45, 0x11,
	0x2b, 0x48, 0x91, 0x0f, 0x17, 0x47, 0x58, 0x6a, 0x4e, 0x7e, 0x72, 0x66, 0x49, 0xa5, 0x90, 0x16,
	0x17, 0x67, 0x4a, 0x66, 0x51, 0x6a, 0x72, 0x49, 0x66, 0x7e, 0x1e, 0x58, 0x3d, 0xb7, 0x11, 0x8f,
	0x1e, 0xc8, 0x42, 0x3d, 0x88, 0x6d, 0x41, 0x08, 0x69, 0x21, 0x11, 0x2e, 0xd6, 0xe2, 0x82, 0xd4,
	0xd4, 0x14, 0xa8, 0x75, 0x10, 0x4e, 0x12, 0x1b, 0xd8, 0x95, 0xc6, 0x80, 0x00, 0x00, 0x00, 0xff,
	0xff, 0x1c, 0x9d, 0x03, 0x21, 0xbc, 0x00, 0x00, 0x00,
}
