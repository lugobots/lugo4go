// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.23.0
// 	protoc        v3.19.4
// source: rl_assistant.proto

package proto

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type RLSessionConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *RLSessionConfig) Reset() {
	*x = RLSessionConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rl_assistant_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RLSessionConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RLSessionConfig) ProtoMessage() {}

func (x *RLSessionConfig) ProtoReflect() protoreflect.Message {
	mi := &file_rl_assistant_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RLSessionConfig.ProtoReflect.Descriptor instead.
func (*RLSessionConfig) Descriptor() ([]byte, []int) {
	return file_rl_assistant_proto_rawDescGZIP(), []int{0}
}

type PlayerOrdersOnRLSession struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Identify the bot's team side (Team_Home or Team_Away)
	TeamSide Team_Side `protobuf:"varint,1,opt,name=team_side,json=teamSide,proto3,enum=lugo.Team_Side" json:"team_side,omitempty"`
	// Player's number 1-11
	Number uint32 `protobuf:"varint,2,opt,name=number,proto3" json:"number,omitempty"`
	// if  behaviour is not set, the orders will be executed
	Behaviour string   `protobuf:"bytes,3,opt,name=behaviour,proto3" json:"behaviour,omitempty"`
	Orders    []*Order `protobuf:"bytes,4,rep,name=orders,proto3" json:"orders,omitempty"`
}

func (x *PlayerOrdersOnRLSession) Reset() {
	*x = PlayerOrdersOnRLSession{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rl_assistant_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayerOrdersOnRLSession) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerOrdersOnRLSession) ProtoMessage() {}

func (x *PlayerOrdersOnRLSession) ProtoReflect() protoreflect.Message {
	mi := &file_rl_assistant_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerOrdersOnRLSession.ProtoReflect.Descriptor instead.
func (*PlayerOrdersOnRLSession) Descriptor() ([]byte, []int) {
	return file_rl_assistant_proto_rawDescGZIP(), []int{1}
}

func (x *PlayerOrdersOnRLSession) GetTeamSide() Team_Side {
	if x != nil {
		return x.TeamSide
	}
	return Team_HOME
}

func (x *PlayerOrdersOnRLSession) GetNumber() uint32 {
	if x != nil {
		return x.Number
	}
	return 0
}

func (x *PlayerOrdersOnRLSession) GetBehaviour() string {
	if x != nil {
		return x.Behaviour
	}
	return ""
}

func (x *PlayerOrdersOnRLSession) GetOrders() []*Order {
	if x != nil {
		return x.Orders
	}
	return nil
}

type PlayersOrders struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DefaultBehaviour string                     `protobuf:"bytes,1,opt,name=default_behaviour,json=defaultBehaviour,proto3" json:"default_behaviour,omitempty"`
	PlayersOrders    []*PlayerOrdersOnRLSession `protobuf:"bytes,2,rep,name=players_orders,json=playersOrders,proto3" json:"players_orders,omitempty"`
}

func (x *PlayersOrders) Reset() {
	*x = PlayersOrders{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rl_assistant_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayersOrders) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayersOrders) ProtoMessage() {}

func (x *PlayersOrders) ProtoReflect() protoreflect.Message {
	mi := &file_rl_assistant_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayersOrders.ProtoReflect.Descriptor instead.
func (*PlayersOrders) Descriptor() ([]byte, []int) {
	return file_rl_assistant_proto_rawDescGZIP(), []int{2}
}

func (x *PlayersOrders) GetDefaultBehaviour() string {
	if x != nil {
		return x.DefaultBehaviour
	}
	return ""
}

func (x *PlayersOrders) GetPlayersOrders() []*PlayerOrdersOnRLSession {
	if x != nil {
		return x.PlayersOrders
	}
	return nil
}

type TurnOutcome struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GameSnapshot         *GameSnapshot `protobuf:"bytes,1,opt,name=game_snapshot,json=gameSnapshot,proto3" json:"game_snapshot,omitempty"`
	ScoreChanged         bool          `protobuf:"varint,2,opt,name=score_changed,json=scoreChanged,proto3" json:"score_changed,omitempty"`
	ShotClockExpired     bool          `protobuf:"varint,3,opt,name=shot_clock_expired,json=shotClockExpired,proto3" json:"shot_clock_expired,omitempty"`
	GoalZoneTimerExpired bool          `protobuf:"varint,4,opt,name=goal_zone_timer_expired,json=goalZoneTimerExpired,proto3" json:"goal_zone_timer_expired,omitempty"`
}

func (x *TurnOutcome) Reset() {
	*x = TurnOutcome{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rl_assistant_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TurnOutcome) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TurnOutcome) ProtoMessage() {}

func (x *TurnOutcome) ProtoReflect() protoreflect.Message {
	mi := &file_rl_assistant_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TurnOutcome.ProtoReflect.Descriptor instead.
func (*TurnOutcome) Descriptor() ([]byte, []int) {
	return file_rl_assistant_proto_rawDescGZIP(), []int{3}
}

func (x *TurnOutcome) GetGameSnapshot() *GameSnapshot {
	if x != nil {
		return x.GameSnapshot
	}
	return nil
}

func (x *TurnOutcome) GetScoreChanged() bool {
	if x != nil {
		return x.ScoreChanged
	}
	return false
}

func (x *TurnOutcome) GetShotClockExpired() bool {
	if x != nil {
		return x.ShotClockExpired
	}
	return false
}

func (x *TurnOutcome) GetGoalZoneTimerExpired() bool {
	if x != nil {
		return x.GoalZoneTimerExpired
	}
	return false
}

type RLResetConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *RLResetConfig) Reset() {
	*x = RLResetConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rl_assistant_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RLResetConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RLResetConfig) ProtoMessage() {}

func (x *RLResetConfig) ProtoReflect() protoreflect.Message {
	mi := &file_rl_assistant_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RLResetConfig.ProtoReflect.Descriptor instead.
func (*RLResetConfig) Descriptor() ([]byte, []int) {
	return file_rl_assistant_proto_rawDescGZIP(), []int{4}
}

var File_rl_assistant_proto protoreflect.FileDescriptor

var file_rl_assistant_proto_rawDesc = []byte{
	0x0a, 0x12, 0x72, 0x6c, 0x5f, 0x61, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x04, 0x6c, 0x75, 0x67, 0x6f, 0x1a, 0x0c, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x11, 0x0a, 0x0f, 0x52, 0x4c, 0x53, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22, 0xa2, 0x01, 0x0a, 0x17,
	0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x4f, 0x6e, 0x52, 0x4c,
	0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2c, 0x0a, 0x09, 0x74, 0x65, 0x61, 0x6d, 0x5f,
	0x73, 0x69, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x6c, 0x75, 0x67,
	0x6f, 0x2e, 0x54, 0x65, 0x61, 0x6d, 0x2e, 0x53, 0x69, 0x64, 0x65, 0x52, 0x08, 0x74, 0x65, 0x61,
	0x6d, 0x53, 0x69, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1c, 0x0a,
	0x09, 0x62, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x75, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x62, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x75, 0x72, 0x12, 0x23, 0x0a, 0x06, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x6c, 0x75,
	0x67, 0x6f, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x06, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x73,
	0x22, 0x82, 0x01, 0x0a, 0x0d, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x73, 0x12, 0x2b, 0x0a, 0x11, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x62, 0x65,
	0x68, 0x61, 0x76, 0x69, 0x6f, 0x75, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x64,
	0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x42, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x75, 0x72, 0x12,
	0x44, 0x0a, 0x0e, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6c, 0x75, 0x67, 0x6f, 0x2e, 0x50,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x4f, 0x6e, 0x52, 0x4c, 0x53,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x0d, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x73, 0x22, 0xd0, 0x01, 0x0a, 0x0b, 0x54, 0x75, 0x72, 0x6e, 0x4f, 0x75,
	0x74, 0x63, 0x6f, 0x6d, 0x65, 0x12, 0x37, 0x0a, 0x0d, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x73, 0x6e,
	0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6c,
	0x75, 0x67, 0x6f, 0x2e, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74,
	0x52, 0x0c, 0x67, 0x61, 0x6d, 0x65, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x12, 0x23,
	0x0a, 0x0d, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x43, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x64, 0x12, 0x2c, 0x0a, 0x12, 0x73, 0x68, 0x6f, 0x74, 0x5f, 0x63, 0x6c, 0x6f, 0x63,
	0x6b, 0x5f, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x10, 0x73, 0x68, 0x6f, 0x74, 0x43, 0x6c, 0x6f, 0x63, 0x6b, 0x45, 0x78, 0x70, 0x69, 0x72, 0x65,
	0x64, 0x12, 0x35, 0x0a, 0x17, 0x67, 0x6f, 0x61, 0x6c, 0x5f, 0x7a, 0x6f, 0x6e, 0x65, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x14, 0x67, 0x6f, 0x61, 0x6c, 0x5a, 0x6f, 0x6e, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x72, 0x45, 0x78, 0x70, 0x69, 0x72, 0x65, 0x64, 0x22, 0x0f, 0x0a, 0x0d, 0x52, 0x4c, 0x52, 0x65,
	0x73, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x32, 0xbb, 0x01, 0x0a, 0x0b, 0x52, 0x4c,
	0x41, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x12, 0x3b, 0x0a, 0x0c, 0x53, 0x74, 0x61,
	0x72, 0x74, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x15, 0x2e, 0x6c, 0x75, 0x67, 0x6f,
	0x2e, 0x52, 0x4c, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x1a, 0x12, 0x2e, 0x6c, 0x75, 0x67, 0x6f, 0x2e, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x6e, 0x61, 0x70,
	0x73, 0x68, 0x6f, 0x74, 0x30, 0x01, 0x12, 0x3b, 0x0a, 0x11, 0x53, 0x65, 0x6e, 0x64, 0x50, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x73, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x12, 0x13, 0x2e, 0x6c, 0x75,
	0x67, 0x6f, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73,
	0x1a, 0x11, 0x2e, 0x6c, 0x75, 0x67, 0x6f, 0x2e, 0x54, 0x75, 0x72, 0x6e, 0x4f, 0x75, 0x74, 0x63,
	0x6f, 0x6d, 0x65, 0x12, 0x32, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x65, 0x74, 0x45, 0x6e, 0x76, 0x12,
	0x13, 0x2e, 0x6c, 0x75, 0x67, 0x6f, 0x2e, 0x52, 0x4c, 0x52, 0x65, 0x73, 0x65, 0x74, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x1a, 0x11, 0x2e, 0x6c, 0x75, 0x67, 0x6f, 0x2e, 0x54, 0x75, 0x72, 0x6e,
	0x4f, 0x75, 0x74, 0x63, 0x6f, 0x6d, 0x65, 0x42, 0x23, 0x5a, 0x21, 0x67, 0x69, 0x74, 0x68, 0x75,
	0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6c, 0x75, 0x67, 0x6f, 0x62, 0x6f, 0x74, 0x73, 0x2f, 0x6c,
	0x75, 0x67, 0x6f, 0x34, 0x67, 0x6f, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_rl_assistant_proto_rawDescOnce sync.Once
	file_rl_assistant_proto_rawDescData = file_rl_assistant_proto_rawDesc
)

func file_rl_assistant_proto_rawDescGZIP() []byte {
	file_rl_assistant_proto_rawDescOnce.Do(func() {
		file_rl_assistant_proto_rawDescData = protoimpl.X.CompressGZIP(file_rl_assistant_proto_rawDescData)
	})
	return file_rl_assistant_proto_rawDescData
}

var file_rl_assistant_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_rl_assistant_proto_goTypes = []interface{}{
	(*RLSessionConfig)(nil),         // 0: lugo.RLSessionConfig
	(*PlayerOrdersOnRLSession)(nil), // 1: lugo.PlayerOrdersOnRLSession
	(*PlayersOrders)(nil),           // 2: lugo.PlayersOrders
	(*TurnOutcome)(nil),             // 3: lugo.TurnOutcome
	(*RLResetConfig)(nil),           // 4: lugo.RLResetConfig
	(Team_Side)(0),                  // 5: lugo.Team.Side
	(*Order)(nil),                   // 6: lugo.Order
	(*GameSnapshot)(nil),            // 7: lugo.GameSnapshot
}
var file_rl_assistant_proto_depIdxs = []int32{
	5, // 0: lugo.PlayerOrdersOnRLSession.team_side:type_name -> lugo.Team.Side
	6, // 1: lugo.PlayerOrdersOnRLSession.orders:type_name -> lugo.Order
	1, // 2: lugo.PlayersOrders.players_orders:type_name -> lugo.PlayerOrdersOnRLSession
	7, // 3: lugo.TurnOutcome.game_snapshot:type_name -> lugo.GameSnapshot
	0, // 4: lugo.RLAssistant.StartSession:input_type -> lugo.RLSessionConfig
	2, // 5: lugo.RLAssistant.SendPlayersOrders:input_type -> lugo.PlayersOrders
	4, // 6: lugo.RLAssistant.ResetEnv:input_type -> lugo.RLResetConfig
	7, // 7: lugo.RLAssistant.StartSession:output_type -> lugo.GameSnapshot
	3, // 8: lugo.RLAssistant.SendPlayersOrders:output_type -> lugo.TurnOutcome
	3, // 9: lugo.RLAssistant.ResetEnv:output_type -> lugo.TurnOutcome
	7, // [7:10] is the sub-list for method output_type
	4, // [4:7] is the sub-list for method input_type
	4, // [4:4] is the sub-list for extension type_name
	4, // [4:4] is the sub-list for extension extendee
	0, // [0:4] is the sub-list for field type_name
}

func init() { file_rl_assistant_proto_init() }
func file_rl_assistant_proto_init() {
	if File_rl_assistant_proto != nil {
		return
	}
	file_server_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_rl_assistant_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RLSessionConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rl_assistant_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlayerOrdersOnRLSession); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rl_assistant_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlayersOrders); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rl_assistant_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TurnOutcome); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rl_assistant_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RLResetConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_rl_assistant_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_rl_assistant_proto_goTypes,
		DependencyIndexes: file_rl_assistant_proto_depIdxs,
		MessageInfos:      file_rl_assistant_proto_msgTypes,
	}.Build()
	File_rl_assistant_proto = out.File
	file_rl_assistant_proto_rawDesc = nil
	file_rl_assistant_proto_goTypes = nil
	file_rl_assistant_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// RLAssistantClient is the client API for RLAssistant service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type RLAssistantClient interface {
	// StartSession will create 11 player connections on each team and wait the game to be on the waiting status
	// It will return a stream of game snapshots, like "Game.JoinATeam" does, but these GameSnapshot will be the
	// same one returned by SendPlayersOrders. But you need to keep the stream open, otherwise the server will
	// consider that the session is done.
	StartSession(ctx context.Context, in *RLSessionConfig, opts ...grpc.CallOption) (RLAssistant_StartSessionClient, error)
	// SendPlayersOrders will send all payers orders, and ignore the ones that do not have orders
	// If there is no order from a player, it will behave are defined in PlayersOrders.default_behaviour.
	// The valid values for default_behaviour are defined by the server. Please run the server help command
	// for more information.
	SendPlayersOrders(ctx context.Context, in *PlayersOrders, opts ...grpc.CallOption) (*TurnOutcome, error)
	// The training environment will need to reset the game status multiple times during the training session.
	// Each time this occurs, the RL assistant must be notified by the trainer, as the game server does not emit any
	// related events.
	// When the environment is reset, the RL assistant will also reset its controllers to maintain synchronization with
	// the game server.
	ResetEnv(ctx context.Context, in *RLResetConfig, opts ...grpc.CallOption) (*TurnOutcome, error)
}

type rLAssistantClient struct {
	cc grpc.ClientConnInterface
}

func NewRLAssistantClient(cc grpc.ClientConnInterface) RLAssistantClient {
	return &rLAssistantClient{cc}
}

func (c *rLAssistantClient) StartSession(ctx context.Context, in *RLSessionConfig, opts ...grpc.CallOption) (RLAssistant_StartSessionClient, error) {
	stream, err := c.cc.NewStream(ctx, &_RLAssistant_serviceDesc.Streams[0], "/lugo.RLAssistant/StartSession", opts...)
	if err != nil {
		return nil, err
	}
	x := &rLAssistantStartSessionClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type RLAssistant_StartSessionClient interface {
	Recv() (*GameSnapshot, error)
	grpc.ClientStream
}

type rLAssistantStartSessionClient struct {
	grpc.ClientStream
}

func (x *rLAssistantStartSessionClient) Recv() (*GameSnapshot, error) {
	m := new(GameSnapshot)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *rLAssistantClient) SendPlayersOrders(ctx context.Context, in *PlayersOrders, opts ...grpc.CallOption) (*TurnOutcome, error) {
	out := new(TurnOutcome)
	err := c.cc.Invoke(ctx, "/lugo.RLAssistant/SendPlayersOrders", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rLAssistantClient) ResetEnv(ctx context.Context, in *RLResetConfig, opts ...grpc.CallOption) (*TurnOutcome, error) {
	out := new(TurnOutcome)
	err := c.cc.Invoke(ctx, "/lugo.RLAssistant/ResetEnv", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RLAssistantServer is the server API for RLAssistant service.
type RLAssistantServer interface {
	// StartSession will create 11 player connections on each team and wait the game to be on the waiting status
	// It will return a stream of game snapshots, like "Game.JoinATeam" does, but these GameSnapshot will be the
	// same one returned by SendPlayersOrders. But you need to keep the stream open, otherwise the server will
	// consider that the session is done.
	StartSession(*RLSessionConfig, RLAssistant_StartSessionServer) error
	// SendPlayersOrders will send all payers orders, and ignore the ones that do not have orders
	// If there is no order from a player, it will behave are defined in PlayersOrders.default_behaviour.
	// The valid values for default_behaviour are defined by the server. Please run the server help command
	// for more information.
	SendPlayersOrders(context.Context, *PlayersOrders) (*TurnOutcome, error)
	// The training environment will need to reset the game status multiple times during the training session.
	// Each time this occurs, the RL assistant must be notified by the trainer, as the game server does not emit any
	// related events.
	// When the environment is reset, the RL assistant will also reset its controllers to maintain synchronization with
	// the game server.
	ResetEnv(context.Context, *RLResetConfig) (*TurnOutcome, error)
}

// UnimplementedRLAssistantServer can be embedded to have forward compatible implementations.
type UnimplementedRLAssistantServer struct {
}

func (*UnimplementedRLAssistantServer) StartSession(*RLSessionConfig, RLAssistant_StartSessionServer) error {
	return status.Errorf(codes.Unimplemented, "method StartSession not implemented")
}
func (*UnimplementedRLAssistantServer) SendPlayersOrders(context.Context, *PlayersOrders) (*TurnOutcome, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendPlayersOrders not implemented")
}
func (*UnimplementedRLAssistantServer) ResetEnv(context.Context, *RLResetConfig) (*TurnOutcome, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResetEnv not implemented")
}

func RegisterRLAssistantServer(s *grpc.Server, srv RLAssistantServer) {
	s.RegisterService(&_RLAssistant_serviceDesc, srv)
}

func _RLAssistant_StartSession_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(RLSessionConfig)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(RLAssistantServer).StartSession(m, &rLAssistantStartSessionServer{stream})
}

type RLAssistant_StartSessionServer interface {
	Send(*GameSnapshot) error
	grpc.ServerStream
}

type rLAssistantStartSessionServer struct {
	grpc.ServerStream
}

func (x *rLAssistantStartSessionServer) Send(m *GameSnapshot) error {
	return x.ServerStream.SendMsg(m)
}

func _RLAssistant_SendPlayersOrders_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PlayersOrders)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RLAssistantServer).SendPlayersOrders(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lugo.RLAssistant/SendPlayersOrders",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RLAssistantServer).SendPlayersOrders(ctx, req.(*PlayersOrders))
	}
	return interceptor(ctx, in, info, handler)
}

func _RLAssistant_ResetEnv_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RLResetConfig)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RLAssistantServer).ResetEnv(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lugo.RLAssistant/ResetEnv",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RLAssistantServer).ResetEnv(ctx, req.(*RLResetConfig))
	}
	return interceptor(ctx, in, info, handler)
}

var _RLAssistant_serviceDesc = grpc.ServiceDesc{
	ServiceName: "lugo.RLAssistant",
	HandlerType: (*RLAssistantServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendPlayersOrders",
			Handler:    _RLAssistant_SendPlayersOrders_Handler,
		},
		{
			MethodName: "ResetEnv",
			Handler:    _RLAssistant_ResetEnv_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StartSession",
			Handler:       _RLAssistant_StartSession_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "rl_assistant.proto",
}
