// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.27.1
// source: remote.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Remote_PauseOrResume_FullMethodName        = "/lugo.Remote/PauseOrResume"
	Remote_NextTurn_FullMethodName             = "/lugo.Remote/NextTurn"
	Remote_NextOrder_FullMethodName            = "/lugo.Remote/NextOrder"
	Remote_SetBallProperties_FullMethodName    = "/lugo.Remote/SetBallProperties"
	Remote_SetPlayerProperties_FullMethodName  = "/lugo.Remote/SetPlayerProperties"
	Remote_SetGameProperties_FullMethodName    = "/lugo.Remote/SetGameProperties"
	Remote_ResumeListeningPhase_FullMethodName = "/lugo.Remote/ResumeListeningPhase"
	Remote_ResetPlayerPositions_FullMethodName = "/lugo.Remote/ResetPlayerPositions"
	Remote_ResetGame_FullMethodName            = "/lugo.Remote/ResetGame"
	Remote_GetGameSnapshot_FullMethodName      = "/lugo.Remote/GetGameSnapshot"
)

// RemoteClient is the client API for Remote service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// The game server implements a Remote service that allows you to control the game flow.
// This service may help you to control or watch the game during training sessions.
// The game server only offers this service on debug mode on.
type RemoteClient interface {
	PauseOrResume(ctx context.Context, in *PauseResumeRequest, opts ...grpc.CallOption) (*CommandResponse, error)
	NextTurn(ctx context.Context, in *NextTurnRequest, opts ...grpc.CallOption) (*CommandResponse, error)
	NextOrder(ctx context.Context, in *NextOrderRequest, opts ...grpc.CallOption) (*CommandResponse, error)
	SetBallProperties(ctx context.Context, in *BallProperties, opts ...grpc.CallOption) (*CommandResponse, error)
	SetPlayerProperties(ctx context.Context, in *PlayerProperties, opts ...grpc.CallOption) (*CommandResponse, error)
	SetGameProperties(ctx context.Context, in *GameProperties, opts ...grpc.CallOption) (*CommandResponse, error)
	ResumeListeningPhase(ctx context.Context, in *ResumeListeningRequest, opts ...grpc.CallOption) (*ResumeListeningResponse, error)
	ResetPlayerPositions(ctx context.Context, in *ResetPlayerPositionsRequest, opts ...grpc.CallOption) (*ResetPlayerPositionsResponse, error)
	ResetGame(ctx context.Context, in *ResetGameRequest, opts ...grpc.CallOption) (*CommandResponse, error)
	GetGameSnapshot(ctx context.Context, in *GameSnapshotRequest, opts ...grpc.CallOption) (*GameSnapshotResponse, error)
}

type remoteClient struct {
	cc grpc.ClientConnInterface
}

func NewRemoteClient(cc grpc.ClientConnInterface) RemoteClient {
	return &remoteClient{cc}
}

func (c *remoteClient) PauseOrResume(ctx context.Context, in *PauseResumeRequest, opts ...grpc.CallOption) (*CommandResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CommandResponse)
	err := c.cc.Invoke(ctx, Remote_PauseOrResume_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *remoteClient) NextTurn(ctx context.Context, in *NextTurnRequest, opts ...grpc.CallOption) (*CommandResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CommandResponse)
	err := c.cc.Invoke(ctx, Remote_NextTurn_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *remoteClient) NextOrder(ctx context.Context, in *NextOrderRequest, opts ...grpc.CallOption) (*CommandResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CommandResponse)
	err := c.cc.Invoke(ctx, Remote_NextOrder_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *remoteClient) SetBallProperties(ctx context.Context, in *BallProperties, opts ...grpc.CallOption) (*CommandResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CommandResponse)
	err := c.cc.Invoke(ctx, Remote_SetBallProperties_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *remoteClient) SetPlayerProperties(ctx context.Context, in *PlayerProperties, opts ...grpc.CallOption) (*CommandResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CommandResponse)
	err := c.cc.Invoke(ctx, Remote_SetPlayerProperties_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *remoteClient) SetGameProperties(ctx context.Context, in *GameProperties, opts ...grpc.CallOption) (*CommandResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CommandResponse)
	err := c.cc.Invoke(ctx, Remote_SetGameProperties_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *remoteClient) ResumeListeningPhase(ctx context.Context, in *ResumeListeningRequest, opts ...grpc.CallOption) (*ResumeListeningResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResumeListeningResponse)
	err := c.cc.Invoke(ctx, Remote_ResumeListeningPhase_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *remoteClient) ResetPlayerPositions(ctx context.Context, in *ResetPlayerPositionsRequest, opts ...grpc.CallOption) (*ResetPlayerPositionsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResetPlayerPositionsResponse)
	err := c.cc.Invoke(ctx, Remote_ResetPlayerPositions_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *remoteClient) ResetGame(ctx context.Context, in *ResetGameRequest, opts ...grpc.CallOption) (*CommandResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CommandResponse)
	err := c.cc.Invoke(ctx, Remote_ResetGame_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *remoteClient) GetGameSnapshot(ctx context.Context, in *GameSnapshotRequest, opts ...grpc.CallOption) (*GameSnapshotResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GameSnapshotResponse)
	err := c.cc.Invoke(ctx, Remote_GetGameSnapshot_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RemoteServer is the server API for Remote service.
// All implementations must embed UnimplementedRemoteServer
// for forward compatibility.
//
// The game server implements a Remote service that allows you to control the game flow.
// This service may help you to control or watch the game during training sessions.
// The game server only offers this service on debug mode on.
type RemoteServer interface {
	PauseOrResume(context.Context, *PauseResumeRequest) (*CommandResponse, error)
	NextTurn(context.Context, *NextTurnRequest) (*CommandResponse, error)
	NextOrder(context.Context, *NextOrderRequest) (*CommandResponse, error)
	SetBallProperties(context.Context, *BallProperties) (*CommandResponse, error)
	SetPlayerProperties(context.Context, *PlayerProperties) (*CommandResponse, error)
	SetGameProperties(context.Context, *GameProperties) (*CommandResponse, error)
	ResumeListeningPhase(context.Context, *ResumeListeningRequest) (*ResumeListeningResponse, error)
	ResetPlayerPositions(context.Context, *ResetPlayerPositionsRequest) (*ResetPlayerPositionsResponse, error)
	ResetGame(context.Context, *ResetGameRequest) (*CommandResponse, error)
	GetGameSnapshot(context.Context, *GameSnapshotRequest) (*GameSnapshotResponse, error)
	mustEmbedUnimplementedRemoteServer()
}

// UnimplementedRemoteServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedRemoteServer struct{}

func (UnimplementedRemoteServer) PauseOrResume(context.Context, *PauseResumeRequest) (*CommandResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PauseOrResume not implemented")
}
func (UnimplementedRemoteServer) NextTurn(context.Context, *NextTurnRequest) (*CommandResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NextTurn not implemented")
}
func (UnimplementedRemoteServer) NextOrder(context.Context, *NextOrderRequest) (*CommandResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NextOrder not implemented")
}
func (UnimplementedRemoteServer) SetBallProperties(context.Context, *BallProperties) (*CommandResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetBallProperties not implemented")
}
func (UnimplementedRemoteServer) SetPlayerProperties(context.Context, *PlayerProperties) (*CommandResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetPlayerProperties not implemented")
}
func (UnimplementedRemoteServer) SetGameProperties(context.Context, *GameProperties) (*CommandResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetGameProperties not implemented")
}
func (UnimplementedRemoteServer) ResumeListeningPhase(context.Context, *ResumeListeningRequest) (*ResumeListeningResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResumeListeningPhase not implemented")
}
func (UnimplementedRemoteServer) ResetPlayerPositions(context.Context, *ResetPlayerPositionsRequest) (*ResetPlayerPositionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResetPlayerPositions not implemented")
}
func (UnimplementedRemoteServer) ResetGame(context.Context, *ResetGameRequest) (*CommandResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResetGame not implemented")
}
func (UnimplementedRemoteServer) GetGameSnapshot(context.Context, *GameSnapshotRequest) (*GameSnapshotResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGameSnapshot not implemented")
}
func (UnimplementedRemoteServer) mustEmbedUnimplementedRemoteServer() {}
func (UnimplementedRemoteServer) testEmbeddedByValue()                {}

// UnsafeRemoteServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RemoteServer will
// result in compilation errors.
type UnsafeRemoteServer interface {
	mustEmbedUnimplementedRemoteServer()
}

func RegisterRemoteServer(s grpc.ServiceRegistrar, srv RemoteServer) {
	// If the following call pancis, it indicates UnimplementedRemoteServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Remote_ServiceDesc, srv)
}

func _Remote_PauseOrResume_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PauseResumeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RemoteServer).PauseOrResume(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Remote_PauseOrResume_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RemoteServer).PauseOrResume(ctx, req.(*PauseResumeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Remote_NextTurn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NextTurnRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RemoteServer).NextTurn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Remote_NextTurn_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RemoteServer).NextTurn(ctx, req.(*NextTurnRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Remote_NextOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NextOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RemoteServer).NextOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Remote_NextOrder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RemoteServer).NextOrder(ctx, req.(*NextOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Remote_SetBallProperties_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BallProperties)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RemoteServer).SetBallProperties(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Remote_SetBallProperties_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RemoteServer).SetBallProperties(ctx, req.(*BallProperties))
	}
	return interceptor(ctx, in, info, handler)
}

func _Remote_SetPlayerProperties_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PlayerProperties)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RemoteServer).SetPlayerProperties(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Remote_SetPlayerProperties_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RemoteServer).SetPlayerProperties(ctx, req.(*PlayerProperties))
	}
	return interceptor(ctx, in, info, handler)
}

func _Remote_SetGameProperties_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GameProperties)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RemoteServer).SetGameProperties(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Remote_SetGameProperties_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RemoteServer).SetGameProperties(ctx, req.(*GameProperties))
	}
	return interceptor(ctx, in, info, handler)
}

func _Remote_ResumeListeningPhase_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResumeListeningRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RemoteServer).ResumeListeningPhase(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Remote_ResumeListeningPhase_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RemoteServer).ResumeListeningPhase(ctx, req.(*ResumeListeningRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Remote_ResetPlayerPositions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResetPlayerPositionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RemoteServer).ResetPlayerPositions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Remote_ResetPlayerPositions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RemoteServer).ResetPlayerPositions(ctx, req.(*ResetPlayerPositionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Remote_ResetGame_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResetGameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RemoteServer).ResetGame(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Remote_ResetGame_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RemoteServer).ResetGame(ctx, req.(*ResetGameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Remote_GetGameSnapshot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GameSnapshotRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RemoteServer).GetGameSnapshot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Remote_GetGameSnapshot_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RemoteServer).GetGameSnapshot(ctx, req.(*GameSnapshotRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Remote_ServiceDesc is the grpc.ServiceDesc for Remote service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Remote_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "lugo.Remote",
	HandlerType: (*RemoteServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PauseOrResume",
			Handler:    _Remote_PauseOrResume_Handler,
		},
		{
			MethodName: "NextTurn",
			Handler:    _Remote_NextTurn_Handler,
		},
		{
			MethodName: "NextOrder",
			Handler:    _Remote_NextOrder_Handler,
		},
		{
			MethodName: "SetBallProperties",
			Handler:    _Remote_SetBallProperties_Handler,
		},
		{
			MethodName: "SetPlayerProperties",
			Handler:    _Remote_SetPlayerProperties_Handler,
		},
		{
			MethodName: "SetGameProperties",
			Handler:    _Remote_SetGameProperties_Handler,
		},
		{
			MethodName: "ResumeListeningPhase",
			Handler:    _Remote_ResumeListeningPhase_Handler,
		},
		{
			MethodName: "ResetPlayerPositions",
			Handler:    _Remote_ResetPlayerPositions_Handler,
		},
		{
			MethodName: "ResetGame",
			Handler:    _Remote_ResetGame_Handler,
		},
		{
			MethodName: "GetGameSnapshot",
			Handler:    _Remote_GetGameSnapshot_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "remote.proto",
}
