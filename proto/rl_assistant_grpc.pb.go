// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.27.1
// source: rl_assistant.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	RLAssistant_StartSession_FullMethodName      = "/lugo.RLAssistant/StartSession"
	RLAssistant_SendPlayersOrders_FullMethodName = "/lugo.RLAssistant/SendPlayersOrders"
	RLAssistant_ResetEnv_FullMethodName          = "/lugo.RLAssistant/ResetEnv"
)

// RLAssistantClient is the client API for RLAssistant service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RLAssistantClient interface {
	// StartSession will create 11 player connections on each team and wait the game to be on the waiting status
	// It will return a stream of game snapshots, like "Game.JoinATeam" does, but these GameSnapshot will be the
	// same one returned by SendPlayersOrders. But you need to keep the stream open, otherwise the server will
	// consider that the session is done.
	StartSession(ctx context.Context, in *RLSessionConfig, opts ...grpc.CallOption) (grpc.ServerStreamingClient[GameSnapshot], error)
	// SendPlayersOrders will send all payers orders, and ignore the ones that do not have orders
	// If there is no order from a player, it will behave are defined in PlayersOrders.default_behaviour.
	// The valid values for default_behaviour are defined by the server. Please run the server help command
	// for more information.
	SendPlayersOrders(ctx context.Context, in *PlayersOrders, opts ...grpc.CallOption) (*TurnOutcome, error)
	// The training environment will need to reset the game status multiple times during the training session.
	// Each time this occurs, the RL assistant must be notified by the trainer, as the game server does not emit any
	// related events.
	// When the environment is reset, the RL assistant will also reset its controllers to maintain synchronization with
	// the game server.
	ResetEnv(ctx context.Context, in *RLResetConfig, opts ...grpc.CallOption) (*TurnOutcome, error)
}

type rLAssistantClient struct {
	cc grpc.ClientConnInterface
}

func NewRLAssistantClient(cc grpc.ClientConnInterface) RLAssistantClient {
	return &rLAssistantClient{cc}
}

func (c *rLAssistantClient) StartSession(ctx context.Context, in *RLSessionConfig, opts ...grpc.CallOption) (grpc.ServerStreamingClient[GameSnapshot], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &RLAssistant_ServiceDesc.Streams[0], RLAssistant_StartSession_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[RLSessionConfig, GameSnapshot]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type RLAssistant_StartSessionClient = grpc.ServerStreamingClient[GameSnapshot]

func (c *rLAssistantClient) SendPlayersOrders(ctx context.Context, in *PlayersOrders, opts ...grpc.CallOption) (*TurnOutcome, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TurnOutcome)
	err := c.cc.Invoke(ctx, RLAssistant_SendPlayersOrders_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rLAssistantClient) ResetEnv(ctx context.Context, in *RLResetConfig, opts ...grpc.CallOption) (*TurnOutcome, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TurnOutcome)
	err := c.cc.Invoke(ctx, RLAssistant_ResetEnv_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RLAssistantServer is the server API for RLAssistant service.
// All implementations must embed UnimplementedRLAssistantServer
// for forward compatibility.
type RLAssistantServer interface {
	// StartSession will create 11 player connections on each team and wait the game to be on the waiting status
	// It will return a stream of game snapshots, like "Game.JoinATeam" does, but these GameSnapshot will be the
	// same one returned by SendPlayersOrders. But you need to keep the stream open, otherwise the server will
	// consider that the session is done.
	StartSession(*RLSessionConfig, grpc.ServerStreamingServer[GameSnapshot]) error
	// SendPlayersOrders will send all payers orders, and ignore the ones that do not have orders
	// If there is no order from a player, it will behave are defined in PlayersOrders.default_behaviour.
	// The valid values for default_behaviour are defined by the server. Please run the server help command
	// for more information.
	SendPlayersOrders(context.Context, *PlayersOrders) (*TurnOutcome, error)
	// The training environment will need to reset the game status multiple times during the training session.
	// Each time this occurs, the RL assistant must be notified by the trainer, as the game server does not emit any
	// related events.
	// When the environment is reset, the RL assistant will also reset its controllers to maintain synchronization with
	// the game server.
	ResetEnv(context.Context, *RLResetConfig) (*TurnOutcome, error)
	mustEmbedUnimplementedRLAssistantServer()
}

// UnimplementedRLAssistantServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedRLAssistantServer struct{}

func (UnimplementedRLAssistantServer) StartSession(*RLSessionConfig, grpc.ServerStreamingServer[GameSnapshot]) error {
	return status.Errorf(codes.Unimplemented, "method StartSession not implemented")
}
func (UnimplementedRLAssistantServer) SendPlayersOrders(context.Context, *PlayersOrders) (*TurnOutcome, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendPlayersOrders not implemented")
}
func (UnimplementedRLAssistantServer) ResetEnv(context.Context, *RLResetConfig) (*TurnOutcome, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResetEnv not implemented")
}
func (UnimplementedRLAssistantServer) mustEmbedUnimplementedRLAssistantServer() {}
func (UnimplementedRLAssistantServer) testEmbeddedByValue()                     {}

// UnsafeRLAssistantServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RLAssistantServer will
// result in compilation errors.
type UnsafeRLAssistantServer interface {
	mustEmbedUnimplementedRLAssistantServer()
}

func RegisterRLAssistantServer(s grpc.ServiceRegistrar, srv RLAssistantServer) {
	// If the following call pancis, it indicates UnimplementedRLAssistantServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&RLAssistant_ServiceDesc, srv)
}

func _RLAssistant_StartSession_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(RLSessionConfig)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(RLAssistantServer).StartSession(m, &grpc.GenericServerStream[RLSessionConfig, GameSnapshot]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type RLAssistant_StartSessionServer = grpc.ServerStreamingServer[GameSnapshot]

func _RLAssistant_SendPlayersOrders_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PlayersOrders)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RLAssistantServer).SendPlayersOrders(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RLAssistant_SendPlayersOrders_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RLAssistantServer).SendPlayersOrders(ctx, req.(*PlayersOrders))
	}
	return interceptor(ctx, in, info, handler)
}

func _RLAssistant_ResetEnv_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RLResetConfig)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RLAssistantServer).ResetEnv(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RLAssistant_ResetEnv_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RLAssistantServer).ResetEnv(ctx, req.(*RLResetConfig))
	}
	return interceptor(ctx, in, info, handler)
}

// RLAssistant_ServiceDesc is the grpc.ServiceDesc for RLAssistant service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RLAssistant_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "lugo.RLAssistant",
	HandlerType: (*RLAssistantServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendPlayersOrders",
			Handler:    _RLAssistant_SendPlayersOrders_Handler,
		},
		{
			MethodName: "ResetEnv",
			Handler:    _RLAssistant_ResetEnv_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StartSession",
			Handler:       _RLAssistant_StartSession_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "rl_assistant.proto",
}
