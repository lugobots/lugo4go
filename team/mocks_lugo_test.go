// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/lugobots/lugo4go/v2/lugo (interfaces: GameClient)

// Package coach_test is a generated GoMock package.
package team_test

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	lugo "github.com/lugobots/lugo4go/v2/lugo"
	grpc "google.golang.org/grpc"
	reflect "reflect"
)

// MockGameClient is a mock of GameClient interface
type MockGameClient struct {
	ctrl     *gomock.Controller
	recorder *MockGameClientMockRecorder
}

// MockGameClientMockRecorder is the mock recorder for MockGameClient
type MockGameClientMockRecorder struct {
	mock *MockGameClient
}

// NewMockGameClient creates a new mock instance
func NewMockGameClient(ctrl *gomock.Controller) *MockGameClient {
	mock := &MockGameClient{ctrl: ctrl}
	mock.recorder = &MockGameClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockGameClient) EXPECT() *MockGameClientMockRecorder {
	return m.recorder
}

// JoinATeam mocks base method
func (m *MockGameClient) JoinATeam(arg0 context.Context, arg1 *lugo.JoinRequest, arg2 ...grpc.CallOption) (lugo.Game_JoinATeamClient, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "JoinATeam", varargs...)
	ret0, _ := ret[0].(lugo.Game_JoinATeamClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// JoinATeam indicates an expected call of JoinATeam
func (mr *MockGameClientMockRecorder) JoinATeam(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "JoinATeam", reflect.TypeOf((*MockGameClient)(nil).JoinATeam), varargs...)
}

// SendOrders mocks base method
func (m *MockGameClient) SendOrders(arg0 context.Context, arg1 *lugo.OrderSet, arg2 ...grpc.CallOption) (*lugo.OrderResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SendOrders", varargs...)
	ret0, _ := ret[0].(*lugo.OrderResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendOrders indicates an expected call of SendOrders
func (mr *MockGameClientMockRecorder) SendOrders(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendOrders", reflect.TypeOf((*MockGameClient)(nil).SendOrders), varargs...)
}
